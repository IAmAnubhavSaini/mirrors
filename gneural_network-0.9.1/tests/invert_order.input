# ###################################################
# author        : Jean Michel Sellier,
#                 Carl Mueller.
# created       : 29 Mar. 2016, Cassibile (SR), Italy
# last modified : 29 Mar. 2016, Cassibile (SR), Italy
# purpose       : The network is trained to invert
#                 the order of two numbers, i.e.
#                 given the couple
#                 (a,b) it returns (b,a).
# ###################################################

# total number of neurons
NUMBER_OF_NEURONS 4

# define the number of connections/weights for every neuron
NEURON 0 NUMBER_OF_CONNECTIONS 1
NEURON 1 NUMBER_OF_CONNECTIONS 1
NEURON 2 NUMBER_OF_CONNECTIONS 2
NEURON 3 NUMBER_OF_CONNECTIONS 2

# define the activation function for every neuron
# neurons #0 and #1 do not need to be specified
# as identity activation functions
NEURON 2 ACTIVATION ID
NEURON 3 ACTIVATION ID

# define the discriminant function for every neuron
# neurons #0 and #1 do not need any discriminant
# as they are identity functions
NEURON 2 DISCRIMINANT LINEAR
NEURON 3 DISCRIMINANT LINEAR

# total number of layers for the network
NETWORK NUMBER_OF_LAYERS 2

# define the number of neurons for each layer
NETWORK LAYER 0 NUMBER_OF_NEURONS 2
NETWORK LAYER 1 NUMBER_OF_NEURONS 2

# assign neurons to every layer of the network
# syntax:
# NETWORK ASSIGN_NEURON_TO_LAYER layer_id local_neuron_id global_neuron_id
NETWORK ASSIGN_NEURON_TO_LAYER 0 0 0
NETWORK ASSIGN_NEURON_TO_LAYER 0 1 1
NETWORK ASSIGN_NEURON_TO_LAYER 1 0 2
NETWORK ASSIGN_NEURON_TO_LAYER 1 1 3

# define the connections between neurons
# syntax: NEURON neuron_id1 CONNECTION connection_id neuron_id2
# neuron_id1 and neuron_id2 are the global indices of two neurons
# to be connected. the output of the neuron "neuron_id2" is connected
# to the input number "connection_id" of the neuron "neuron_id1"
# the first layer [0] does not need anything
# since its neurons are not connected to any neuron
NEURON 2 CONNECTION 0 0
NEURON 2 CONNECTION 1 1
NEURON 3 CONNECTION 0 0
NEURON 3 CONNECTION 1 1

# total number of training data
# for supervised learning
NUMBER_OF_TRAINING_POINTS 3

# training data - input
# syntax: TRAINING_POINT IN point_index neuron_index connection_index value
TRAINING_POINT IN 0 0 0 1
TRAINING_POINT IN 0 1 0 2
TRAINING_POINT IN 1 0 0 3
TRAINING_POINT IN 1 1 0 4
TRAINING_POINT IN 2 0 0 5
TRAINING_POINT IN 2 1 0 6

# training data - output
# syntax: TRAINING_POINT OUT point_index neuron_index value
TRAINING_POINT OUT 0 2 2
TRAINING_POINT OUT 0 3 1
TRAINING_POINT OUT 1 2 4
TRAINING_POINT OUT 1 3 3
TRAINING_POINT OUT 2 2 6
TRAINING_POINT OUT 2 3 5

# initial randomization of weights = ON/OFF
INITIAL_WEIGHTS_RANDOMIZATION ON

# space search for the weights
WEIGHT_MINIMUM -1.
WEIGHT_MAXIMUM +1.

# specify the error function for the training process
ERROR_TYPE L2

# genetic algorithm syntax: verbosity nmax npop rate accuracy
# where:
# verbosity = ON/OFF
# nmax      = number of generations
# npop      = number of individuals per generation
# rate      = rate of change between one generation and the parent
# accuracy  = numerical accuracy
TRAINING_METHOD GENETIC_ALGORITHM ON 32 128 0.25 1.e-5

# save the output of the network
# for now consider by default that neuron #0 is the input
# and neuron #(NUMBER_OF_NEURONS-1) is the output
SAVE_OUTPUT ON
OUTPUT_FILE_NAME final_results.dat
NUMBER_OF_INPUT_POINTS 5
# syntax: INPUT_POINT point_index neuron_index connection_index value
NETWORK_INPUT 0 0 0 1
NETWORK_INPUT 0 1 0 2
NETWORK_INPUT 1 0 0 3
NETWORK_INPUT 1 1 0 4
NETWORK_INPUT 2 0 0 5
NETWORK_INPUT 2 1 0 6
NETWORK_INPUT 3 0 0 7
NETWORK_INPUT 3 1 0 8
NETWORK_INPUT 4 0 0 9
NETWORK_INPUT 4 1 0 10

